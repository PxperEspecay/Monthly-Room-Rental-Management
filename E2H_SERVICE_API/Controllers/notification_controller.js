const Notification = require("../Models/notification_model"); // ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
const Renter = require("../Models/renter_model");
const Users = require("../Models/usersModel");
const Role = require("../Models/role_model");
const NotificationMapping = require("../Models/notification_mapping_model");

Notification.hasMany(NotificationMapping, {
  foreignKey: "notification_id",
  as: 'notification_mappings'
});

NotificationMapping.belongsTo(Notification, {
  foreignKey: "notification_id",
  as: 'notification'
});

exports.GetNotification = async (req, res) => {
  try {
    const { renter_id, admin_id } = req.body;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á renter_id ‡∏´‡∏£‡∏∑‡∏≠ admin_id ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏ï‡∏±‡∏ß
    if (!renter_id && !admin_id) {
      return res.status(400).json({
        status_code: 4000,
        message: "Fail",
        description: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ renter_id ‡∏´‡∏£‡∏∑‡∏≠ admin_id",
      });
    }

    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
    let whereCondition = {};

    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ï‡∏≤‡∏° role ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤
    if (renter_id) {
      whereCondition.renter_id = renter_id;
    } else if (admin_id) {
      whereCondition.admin_id = admin_id;
    }

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• notification_mapping ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• notification ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
    const notificationMappings = await NotificationMapping.findAll({
      where: whereCondition,
      include: [
        {
          model: Notification,
          as: "notification", // ‡∏ä‡∏∑‡πà‡∏≠ association ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•
          attributes: ["message", "path", "create_date","notification_type", "notification_no"],
        },
      ],
      order: [
        ["create_date", "DESC"], // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
      ],
      attributes: ["notification_map_id","notification_id", "is_read", "create_date"],
    });

    // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡πà‡∏≤‡∏ô
    const unreadTotal = await NotificationMapping.count({
      where: {
        ...whereCondition,
        is_read: false,
      },
    });

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å NotificationMappings
    if (!notificationMappings || notificationMappings.length === 0) {
      return res.status(404).json({
        status_code: 4040,
        message: "No notifications found",
        description: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô",
      });
    }

    const formattedNotifications = notificationMappings.map((mapping) => {
      const notification = mapping.notification;
    
      if (!notification) {
        console.error(`No notification found for mapping ID: ${mapping.id}`);
        return {
          notification_map_id: mapping.id,
          notification_id: mapping.notification_id,
          path: null,
          message: null,
          notification_type: null,
          notification_no: null, // üëà fallback ‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
          is_read: mapping.is_read,
          create_date: mapping.create_date,
        };
      }
    
      return {
        notification_map_id: mapping.notification_map_id,
        notification_id: mapping.notification_id,
        path: notification.path || '',
        message: notification.message || '',
        notification_type: notification.notification_type || '',
        notification_no: notification.notification_no || '',
        is_read: mapping.is_read,
        create_date: mapping.create_date,
      };
    });

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
    return res.status(200).json({
      status_code: 8000,
      message: "Success",
      description: "Get notification successfully.",
      data: {
        unread_total: unreadTotal,
        notifications: formattedNotifications,
      },
    });
  } catch (error) {
    console.error("Error fetching notifications:", error);
    return res.status(500).json({
      status_code: 5000,
      message: "Fail",
      description: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô",
      error: error.message,
    });
  }
};

exports.ReadNotification = async (req, res) => {
    try {
      const { notification_map_id } = req.body;
  
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á notification_map_id ‡∏°‡∏≤‡πÑ‡∏´‡∏°
      if (!notification_map_id) {
        return res.status(400).json({
          status_code: 4000,
          message: "Fail",
          description: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ notification_map_id",
        });
      }
  
      // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö notification_map_id
      const notificationMapping = await NotificationMapping.findOne({
        where: { notification_map_id : notification_map_id },
      });
  
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
      if (!notificationMapping) {
        return res.status(404).json({
          status_code: 4040,
          message: "Fail",
          description: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô",
        });
      }
  
      // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ is_read ‡πÄ‡∏õ‡πá‡∏ô true
      notificationMapping.is_read = true;
      await notificationMapping.save();
  
      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö
      return res.status(200).json({
        status_code: 8000,
        message: "Success",
        description: "‡∏≠‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        data: {
          notification_map_id: notificationMapping.id,
          is_read: notificationMapping.is_read,
        },
      });
    } catch (error) {
      console.error("Error reading notification:", error);
      return res.status(500).json({
        status_code: 5000,
        message: "Fail",
        description: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô",
        error: error.message,
      });
    }
  };
  
